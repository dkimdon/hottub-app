---
  AWSTemplateFormatVersion: "2010-09-09"
  Description: "Bwa Console Backend Resources"
  Parameters:
    LambdaS3Bucket:
      Type: String
      Default: coho-bwa-console
    LambdaS3Key:
      Type: String
      Default: api/devel/bwa-console-lambda-1578377982.zip
    HostingBucketName:
      Type: String
      Default: hottub-cohoecovillage-org
    FullDomainName:
      Type: String
      Description: The full domain name e.g. app.example.com
      AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
      ConstraintDescription: must be a valid DNS zone name.
      Default: hottub.cohoecovillage.org
    AcmCertificateArn:
      Type: String
      Description: the Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM) certificate.
      AllowedPattern: "arn:aws:acm:.*"
      Default: arn:aws:acm:us-east-1:660983422489:certificate/34a28389-4ac9-4ba8-ab0e-0a45db0a8f4f
    MysqlHost:
      Type: String
      Default: 172.31.29.131
    VpcId:
      Type: AWS::EC2::VPC::Id
      Default: vpc-7cece505
    SubnetId:
      Type: AWS::EC2::Subnet::Id
      Default: subnet-5789eb2e

  Resources:

 ################################################
 # Data operations go through a AWS AppSync API #
 ################################################

    BwaGraphQLApi:
      Type: AWS::AppSync::GraphQLApi
      Properties:
        Name: Bwa Api
        LogConfig:
          CloudWatchLogsRoleArn: !GetAtt AppSyncLoggingRole.Arn
          FieldLogLevel: ALL
        AuthenticationType: AMAZON_COGNITO_USER_POOLS
        UserPoolConfig:
          UserPoolId: !Ref UserPool
          AwsRegion: !Ref AWS::Region
          DefaultAction: ALLOW

    SNSRole:
      Type: AWS::IAM::Role
      Description: "An IAM Role to allow Cognito to send SNS messages"
      Properties:
        ManagedPolicyArns:
          - Ref: CognitoSNSPolicy
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Principal:
                Service:
                  - cognito-idp.amazonaws.com
      DependsOn:
        - CognitoSNSPolicy

    CognitoSNSPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: Managed policy to allow Amazon Cognito to access SNS
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: sns:publish
              Resource: "*"

    UserPool:
      Type: AWS::Cognito::UserPool
      Description: "A Cognito user pool for authenticating users"
      Properties:
        UserPoolName: !Sub ${AWS::StackName}-user-pool
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
            TemporaryPasswordValidityDays: 35
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: True
          InviteMessageTemplate:
            EmailMessage: !Sub |
              <p>
              Welcome to the CoHo Hot Tub Console: https://${FullDomainName}
              <p>
              Your username is:
              <p>
              {username}
              <p>
              and your temporary password is:
              <p>
              {####}
            EmailSubject: CoHo Hot Tub Console - Your temporary credentials
            SMSMessage: To access the CoHo Hot Tub Console your username is {username} and temporary password is {####}.
        AutoVerifiedAttributes:
          - email
        MfaConfiguration: "OFF"
        SmsAuthenticationMessage: Your authentication code for the CoHo Hot Tub Console is {####}
        SmsConfiguration:
          ExternalId: !Sub ${AWS::StackName}-external
          SnsCallerArn: !GetAtt SNSRole.Arn
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Description: "App Client used by AWS AppSync"
      Properties:
        ClientName: !Sub ${AWS::StackName}-appsync-client
        GenerateSecret: false
        RefreshTokenValidity: 1
        UserPoolId: !Ref UserPool

 ####################################################
 # Define the GraphQL schema, this defines what     #
 # API operations are available to the application. #
 ####################################################

    BwaGraphQLSchema:
      Type: AWS::AppSync::GraphQLSchema
      Properties:
        Definition: |
          schema {
           query: Query
          }
          type tubState {
           lastReportedTemperature: Float
           lastReportTimestamp: Int
           lastSeenTimestamp: Int
           targetTemperature: Float
          }
          type schedule {
           id: Int
           email: String
           temperature: Int
           start: Int
           end: Int
          }
          type Query {
           getTubState: tubState
           setTubState(targetTemperature: Float): tubState
           getSchedules(startRangeBegin: Int!, startRangEnd: Int!): [schedule]
           createSchedule(email: String!, temperature: Int!, start: Int!, end: Int!): schedule
           updateSchedule(id: Int!, email: String!, temperature: Int!, start: Int!, end: Int!): schedule
          }
        ApiId: !GetAtt BwaGraphQLApi.ApiId

# Define the datasource associated with our Lambda function.  All requests go
# through this lambda function.
    LambdaDataSource:
      Type: AWS::AppSync::DataSource
      Properties:
        Name: jacobiConsoleLambda
        Type: AWS_LAMBDA
        ApiId: !GetAtt BwaGraphQLApi.ApiId
        ServiceRoleArn:  !GetAtt LambdaRole.Arn
        LambdaConfig:
          LambdaFunctionArn: !GetAtt LambdaFunction.Arn

# The resolvers define the interface between the GraphQL API and the Datasources.
# More information on resolver mapping syntax:
# https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference.html

    GetTubStateResolver:
      Type: AWS::AppSync::Resolver
      DependsOn:
      - BwaGraphQLSchema
      Properties:
        ApiId: !GetAtt BwaGraphQLApi.ApiId
        TypeName: Query
        FieldName: getTubState
        DataSourceName: !GetAtt LambdaDataSource.Name
        RequestMappingTemplate: |
          {
            "version": "2017-02-28",
            "operation": "Invoke",
            "payload": {
              "field": "get-tub-state",
              "identity": {
                "username" : $utils.toJson($context.identity.username)
              }
            }
          }
        ResponseMappingTemplate: |
          $util.toJson($ctx.result)

    SetTubStateResolver:
      Type: AWS::AppSync::Resolver
      DependsOn:
      - BwaGraphQLSchema
      Properties:
        ApiId: !GetAtt BwaGraphQLApi.ApiId
        TypeName: Query
        FieldName: setTubState
        DataSourceName: !GetAtt LambdaDataSource.Name
        RequestMappingTemplate: |
          {
            "version": "2017-02-28",
            "operation": "Invoke",
            "payload": {
              "field": "set-tub-state",
              "arguments": $utils.toJson($context.arguments),
              "identity": {
                "username" : $utils.toJson($context.identity.username)
              }
            }
          }
        ResponseMappingTemplate: |
          $util.toJson($ctx.result)

    getSchedulesResolver:
      Type: AWS::AppSync::Resolver
      DependsOn:
      - BwaGraphQLSchema
      Properties:
        ApiId: !GetAtt BwaGraphQLApi.ApiId
        TypeName: Query
        FieldName: getSchedules
        DataSourceName: !GetAtt LambdaDataSource.Name
        RequestMappingTemplate: |
          {
            "version": "2017-02-28",
            "operation": "Invoke",
            "payload": {
              "field": "get-schedules",
              "arguments": $utils.toJson($context.arguments),
              "identity": {
                "username" : $utils.toJson($context.identity.username)
              }
            }
          }
        ResponseMappingTemplate: |
          $util.toJson($ctx.result)

    createScheduleResolver:
      Type: AWS::AppSync::Resolver
      DependsOn:
      - BwaGraphQLSchema
      Properties:
        ApiId: !GetAtt BwaGraphQLApi.ApiId
        TypeName: Query
        FieldName: createSchedule
        DataSourceName: !GetAtt LambdaDataSource.Name
        RequestMappingTemplate: |
          {
            "version": "2017-02-28",
            "operation": "Invoke",
            "payload": {
              "field": "create-schedule",
              "arguments": $utils.toJson($context.arguments),
              "identity": {
                "username" : $utils.toJson($context.identity.username)
              }
            }
          }
        ResponseMappingTemplate: |
          $util.toJson($ctx.result)

    updateScheduleResolver:
      Type: AWS::AppSync::Resolver
      DependsOn:
      - BwaGraphQLSchema
      Properties:
        ApiId: !GetAtt BwaGraphQLApi.ApiId
        TypeName: Query
        FieldName: updateSchedule
        DataSourceName: !GetAtt LambdaDataSource.Name
        RequestMappingTemplate: |
          {
            "version": "2017-02-28",
            "operation": "Invoke",
            "payload": {
              "field": "update-schedule",
              "arguments": $utils.toJson($context.arguments),
              "identity": {
                "username" : $utils.toJson($context.identity.username)
              }
            }
          }
        ResponseMappingTemplate: |
          $util.toJson($ctx.result)

    AppSyncLoggingRole:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: Allow
              Principal: 
                Service: 
                  - "appsync.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Path: "/"
        Policies: 
          - 
            PolicyName: "LambdaAccess"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - 
                  Action: 
                     - logs:CreateLogGroup
                     - logs:CreateLogStream
                     - logs:PutLogEvents
                  Effect: Allow
                  Resource: "*"

    LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Principal: 
                Service: 
                  - "lambda.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Path: "/"
        Policies: 
          - 
            PolicyName: "LambdaAccess"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - Effect: Allow
                  Action:
                     - 'ec2:CreateNetworkInterface'
                     - 'ec2:DescribeNetworkInterfaces'
                     - 'ec2:DeleteNetworkInterface'
                  Resource:
                     - '*'
                - 
                  Action: 
                     - "logs:*"
                  Effect: "Allow"
                  Resource: "arn:aws:logs:*:*:*"
                -
                  Action:
                     - "iot:GetThingShadow" 
                     - "iot:UpdateThingShadow" 
                  Effect: "Allow"
                  Resource:
                     - "*"
    LambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - appsync.amazonaws.com
            Action:
            - sts:AssumeRole

    AppSyncLambdaInvokePolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: AppSyncLambdaInvokePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:*
            Resource: "*"
        Roles:
        - !Ref LambdaRole

    LambdaSecurityGroup: 
      Type: AWS::EC2::SecurityGroup
      Properties: 
        GroupDescription: "Security Group For The Bwa Console Lambda Function"
        VpcId: !Ref VpcId

    LambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        Code: 
          S3Bucket: !Ref LambdaS3Bucket
          S3Key: !Ref LambdaS3Key
        Runtime: nodejs8.10
        Timeout: 16
        Role: !GetAtt LambdaExecutionRole.Arn
        Handler: index.lambda_handler
        MemorySize: 128
        Environment:
          Variables:
            MYSQL_HOST: !Ref MysqlHost
            MYSQL_PORT: 3306
            MYSQL_USER: bwa
            MYSQL_PASS: l1k3h0tw5t3R!
            MYSQL_DATABASE: hottub
        VpcConfig:
          SecurityGroupIds:
            - !Ref LambdaSecurityGroup
          SubnetIds:
            - !Ref SubnetId

    MysqlSecurityGroupIngress:
       Type: AWS::EC2::SecurityGroupIngress
       Properties:
         IpProtocol: tcp
         GroupId: sg-0c9f729423bb744c2
         SourceSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId
         FromPort: '3306'
         ToPort: '3306'

    LambdaLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: !Join ['/', ['/aws/lambda', !Ref LambdaFunction ]]
        RetentionInDays: 1

 ####################################################
 # Define the resources used to host the React app. #
 ####################################################

    HostingBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Ref HostingBucketName
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
      DeletionPolicy: Delete
    HostingBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref HostingBucket
        PolicyDocument:
          Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 'HostingBucket', /*]]
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      DependsOn:
      - HostingBucket
      Properties:
        DistributionConfig:
          Comment: Cloudfront Distribution pointing to S3 bucket
          Origins:
          - DomainName: !Select [2, !Split ["/", !GetAtt HostingBucket.WebsiteURL]]
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
          Enabled: true
          HttpVersion: 'http2'
          DefaultRootObject: index.html
          Aliases:
          - !Ref FullDomainName
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            Compress: true
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          PriceClass: PriceClass_All
          ViewerCertificate:
            AcmCertificateArn: !Ref AcmCertificateArn
            SslSupportMethod: sni-only
